name: test-ssla-certs
on:
  workflow_dispatch:
    inputs:
      chipIds:
        description: 'Specify the ChipID'
        required: true
  # push:
  #   branches:
  #     - main

jobs:   
  ssla-certs:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4  

    # - name: Install dependencies
    #   run: |
    #     sudo apt-get install python3-setuptools

    - name: Download Previous Execution Artificats.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        OTHER_REPO="upendraddev/azuredev"
        WF_NAME="test-ssla-certs"
        ARTIFACT_NAME="SO-Files"
        exit_code=0
        #RUN_ID="7700153957"
        timestamp=$(date +%Y%m%d%H%M%S)
        CSVFilename=${timestamp}-SO_Outputs.csv
        # cleanup() {
        # if [ $exit_code -gt 0 ]; then
        #     # echo "hello"
        #     echo " exit_code=$exit_code"
        #     echo "S.no" > ./opsjob/"$CSVFilename"; 
        #     echo "ChipID" >>./opsjob/"$CSVFilename"; 
        #     echo "Date" >>./opsjob/"$CSVFilename"; 
        #     echo "Requested Count" >>./opsjob/"$CSVFilename"; 
        # fi
        # }
        # trap cleanup EXIT
        RUN_ID=$(gh run --repo ${OTHER_REPO} list --workflow ${WF_NAME} --json databaseId --jq .[1].databaseId) 
        mkdir testresponse
        cd testresponse
        response=$(gh api \
        -H "Accept: application/vnd.github+json" \
        -H "X-GitHub-Api-Version: 2022-11-28" \
        /repos/$OTHER_REPO/actions/runs/$RUN_ID)
        url=$(echo $response | jq -r '.artifacts_url')
        echo "url : $url"
        echo "before" 
        ls          
        echo "url: $url"
        echo "after"
        res=$(curl -L \
        -H "Accept: application/vnd.github+json" \
        -H "Authorization: Bearer $GH_TOKEN" \
        -H "X-GitHub-Api-Version: 2022-11-28" \
        $url)
        ls
        count=$(echo $res | jq -r '.total_count')
        if [[ $count == 0 ]] ; then
          echo "$count"
          else
          echo " Count : $count"
          fi
        # gh run --repo ${OTHER_REPO} download ${RUN_ID} -n ${ARTIFACT_NAME} 
        filecount=$(ls | grep .csv -c)
        if [[  $filecount == 1 ]]; then 
          filename=$(ls | grep .csv )          
          cp $filename ./opsjob/
        fi

    # - name: Script Execution For Certificate Operations
    #   run: |
    #     # ChipIDC="Aid-0005-000000000007,Aid-0005-000000000003,Aid-0005-000000000004,Aid-0005-000000000005,Aid-0005-000000000008"
    #     ChipIDC=${{ github.event.inputs.chipIds }}
    #     ChipIDContent=$(echo $ChipIDC | tr "," "\n")
    #     ChipIDCount=$(echo $ChipIDC | grep -o "," | wc -l)
    #     echo $ChipIDCount
    #     # Token="hdbzvb"
    #     # timestamp=$(date +%Y%m%d%H%M%S)
    #     # Dirname=${timestamp}-SOFiles
    #     # mkdir -p ./opsjob/${Dirname}
    #     if [[ "$ChipIDCount" -lt 100 ]]; then
    #     for ChipID in $ChipIDContent
    #     do
    #         bash ./opsjob/scripts/run_sssla_cetificate_operations_latest.sh \
    #         "https://aig-tri-sand.com" \
    #         "$ChipID" \
    #         "$Token"  \
    #         "$Dirname" 
    #     done
    #     sudo apt install pwgen -y
    #     PASSPHRASE=$(pwgen 12 1)
    #     cd opsjob
    #     sudo python3 ./scripts/read-csv-data.py $ChipIDC
    #     echo ${PASSPHRASE} >>./password.txt
    #     sudo apt install p7zip-full -y
    #     7za a -tzip -p${PASSPHRASE} -mem=AES256 ${Dirname}.zip ${Dirname}
    #     else
    #       echo "More than 100 ChipID's were provided as an Input. Please review the input again"
    #       exit 1
    #     fi
    # - uses: actions/upload-artifact@v4
    #   if: ${{ always() }}
    #   with:
    #     name: SO-Files
    #     path: |
    #       ./opsjob/*.csv
    #       ./opsjob/password.txt
    #       ./opsjob/*.zip 

    # - uses: actions/download-artifact@v4
    #   with:
    #     path: ./opsjob/*.csv
    # - name: Display structure of downloaded files
    #   run: ls -R ./opsjob/*.csv

          
